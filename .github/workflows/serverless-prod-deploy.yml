name: (PROD) Deploy to AWS

on:
  push:
    branches: [ 'main' ]

  pull_request:
    types: [ opened ]
#     paths:
#       - '$WORKING_DIRECTORY/**'

jobs:
  directories: # Job that list subdirectories for serverless deployment
    runs-on: ubuntu-latest
    outputs:
      dir: ${{ steps.set-dirs.outputs.dir }} # generate output name dir by using inner step output
    steps:
      - uses: actions/checkout@v2

        # Give it an id to handle to get step outputs in the outputs key above
      - id: set-dirs

        # Define step output named dir base on ls command transformed to JSON thanks to jq
        run: cd apps && echo "::set-output name=dir::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"

  deployment:
    runs-on: ubuntu-latest

    # Depends on previous job
    needs: [ directories ]
    strategy:
      matrix:
        # List matrix strategy from directories dynamically
        dir: ${{fromJson(needs.directories.outputs.dir)}}
    env:
      DIR_PATH: 'apps/${{ matrix.dir }}'
      SERVERLESS_FILE: 'apps/${{ matrix.dir }}serverless.yml'
      PACKAGE_LOCK_DIRECTORY: 'apps/${{ matrix.dir }}package-lock.json'

    steps:
      - uses: actions/checkout@v2

      - name: Check serverless.yml file exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ${{ env.SERVERLESS_FILE }}

      - uses: actions/setup-node@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: ${{ env.PACKAGE_LOCK_DIRECTORY }}

      - name: Install dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: ${{ env.DIR_PATH }}
        run: npm ci

      - name: Deploy to AWS
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: ${{ env.DIR_PATH }}
        run: |
          npx serverless config credentials \
          --provider aws \
          --key ${{ secrets.AWS_ACCESS_KEY_ID }} \
          --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }} \

          npx serverless deploy \
          --stage prod


#   deploy-production:
#     runs-on: ubuntu-latest
#     environment: production
#     defaults:
#       run:
#         working-directory: ${{ env.WORKING_DIRECTORY }}

#     steps:
#       - name: Notify about starting this deployment
#         if: github.event_name == 'pull_request'
#         uses: hasura/comment-progress@v2.1.0
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ env.REPOSITORY }}
#           number: ${{ github.event.number }}
#           id: deploy-production
#           message: 'Starting deployment of this pull request.'

#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: 16
#           cache: 'npm'
#           cache-dependency-path: ${{ env.PACKAGE_LOCK_DIRECTORY }}

#       - name: Install dependencies
#         run: npm ci

#       - name: Deploy service to [PRODUCTION] AWS
#         if: "${{ github.event.inputs.stage == '' }}"
#         uses: mathiasvr/command-output@v1
#         id: deployment_prod
#         with:
#           run: |
#             cd serverless-availability-api && npx serverless config credentials \
#             --provider aws \
#             --key ${{ secrets.AWS_ACCESS_KEY_ID }} \
#             --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }} \

#             npx serverless deploy \
#             --stage prod

#       - name: Notify about the successfull deployment
#         if: steps.deployment_prod.outputs.stdout && github.event_name == 'pull_request'
#         uses: hasura/comment-progress@v2.1.0
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ env.REPOSITORY }}
#           number: ${{ github.event.number }}
#           id: deploy-production
#           message: ${{ steps.deployment_prod.outputs.stdout }}
#           append: true

#       - name: Notify about the failed deployment
#         if: steps.cmd.outputs.stderr && github.event_name == 'pull_request'
#         uses: hasura/comment-progress@v2.1.0
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ env.REPOSITORY }}
#           number: ${{ github.event.number }}
#           id: deploy-production
#           message: ${{ steps.cmd.outputs.stderr }}
#           append: true
